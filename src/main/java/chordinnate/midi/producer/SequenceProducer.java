package chordinnate.midi.producer;

import chordinnate.config.MidiConfig;
import chordinnate.model.musictheory.notation.Note;
import chordinnate.model.musictheory.pitch.Pitch;
import chordinnate.model.musictheory.temporal.rhythm.Beat;
import chordinnate.model.playback.Playable;
import chordinnate.util.ContextProvider;
import org.apache.commons.lang3.StringUtils;
import org.jetbrains.annotations.Nullable;

import javax.sound.midi.Sequence;
import java.time.LocalTime;

public class SequenceProducer {

    private final MidiConfig config = ContextProvider.getContext().getBean(MidiConfig.class);

    /**
     * Generates a playable MIDI {@link Sequence} for a single {@link Pitch}.
     * @param pitch
     * @return
     */
    public Sequence getSequence(Pitch pitch) {
        return buildSequence(Note.builder(Beat.QUARTER, pitch).build());
    }

    /**
     * Generates a playable MIDI {@link Sequence} for a {@link Playable} object.
     * @param playable
     * @return
     */
    public Sequence getSequence(Playable playable) {
        return buildSequence(playable);
    }

    @Nullable
    private Sequence buildSequence(Playable playable) {
        Sequence sequence;
        try {
            sequence = new Sequence(config.getFrames(), config.getTickResolution());

            MidiEventProducer producer = new MidiEventProducer(sequence, config);

            /*
             * TODO: add a method Playable.hasMidiDataFor(MidiDataType:: enum):: boolean
             *  that can be used here to determine whether to add the default "setup" events below.
             *  Doing so will eliminate superfluous MIDI messages that could potentially confuse or break MIDI playback / interpretation.
             */

            // Always add these to the beginning of every MIDI sequence
            producer.addCopyrightNoticeEvent(MidiConfig.DEFAULT_TRACK_NUMBER, StringUtils.defaultIfEmpty(config.getCopyrightNotice(), StringUtils.EMPTY)
                    + System.lineSeparator() + "MIDI sequence generated by ChordInnate");
            if (config.isMidiTimeCodeEnabled()) {
                producer.addSMPTEOffsetEvent(LocalTime.now(), 0); // TODO: set subframe
                // TODO: tempo map to use with MTC?
            }
            producer.addSetTempoEvent(0L, config.getDefaultTempo());
            producer.addTimeSignatureEvent(0L, config.getDefaultTimeSignature());
            producer.addKeySignatureEvent(0L, config.getDefaultKeySignature());

            // add all custom MIDI events
            playable.accept(producer);
        } catch (Exception ex) {
            return null;
        }
        return sequence;
    }
}
