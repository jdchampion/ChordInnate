package chordinnate.service.playback.sequence;

import chordinnate.config.MidiConfig;
import chordinnate.model.musictheory.pitch.Pitch;
import chordinnate.model.musictheory.temporal.rhythm.Beat;
import chordinnate.model.playback.Note;
import chordinnate.service.playback.Playable;
import chordinnate.util.ContextProvider;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.sound.midi.Sequence;
import java.time.LocalTime;

@Data
@NoArgsConstructor
public class SequenceGenerator {

    private final MidiConfig config = ContextProvider.getContext().getBean(MidiConfig.class);

    private long tick = 0;

    /**
     * Generates a playable MIDI {@link Sequence} for a single {@link Pitch}.
     * @param pitch
     * @return
     */
    public Sequence getSequence(Pitch pitch) {
        return buildSequence(Note.builder(Beat.QUARTER, pitch).build());
    }

    /**
     * Generates a playable MIDI {@link Sequence} for a {@link Playable} object.
     * @param playable
     * @return
     */
    public Sequence getSequence(Playable playable) {
        return buildSequence(playable);
    }

    private Sequence buildSequence(Playable playable) {
        Sequence sequence;
        try {
            sequence = new Sequence(config.getFrames(), config.getTickResolution());

            MidiEventGenerator generator = new MidiEventGenerator(sequence, this);

            // Always add these to the beginning of every MIDI sequence
            generator.addSequenceNumberEvent(config.getDefaultTrack(), 0);
            generator.addSetTempoEvent(0, config.getDefaultTempo());
            generator.addProgramChangeEvent(0, config.getDefaultTrack(), config.getDefaultChannel(), config.getDefaultInstrument());
            generator.addCopyrightNoticeEvent(config.getDefaultTrack(), config.getCopyrightNotice());
            generator.addCopyrightNoticeEvent(config.getDefaultTrack(), "MIDI sequence generated by ChordInnate");
            generator.addTrackNameEvent(config.getDefaultTrack(), ""); // TODO: set value provided by user for the given track
            if (config.isMidiTimeCodeEnabled()) {
                generator.addSMPTEOffsetEvent(LocalTime.now(), (byte) 0x0); // TODO: set subframe
                // TODO: tempo map to use with MTC?
            }
            generator.addTimeSignatureEvent(0, config.getDefaultTimeSignature());
            generator.addKeySignatureEvent(0, config.getDefaultKeySignature());

            // add all custom MIDI events
            playable.accept(generator);

            generator.addEndOfTrackEvent();

        } catch (Exception ex) {
            return null;
        }
        return sequence;
    }
}
