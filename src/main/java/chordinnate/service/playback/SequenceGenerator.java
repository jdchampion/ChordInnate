package chordinnate.service.playback;

import chordinnate.config.MidiConfig;
import chordinnate.model.musictheory.pitch.Pitch;
import chordinnate.model.musictheory.temporal.rhythm.Beat;
import chordinnate.model.playback.Note;
import chordinnate.model.playback.Playable;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.jetbrains.annotations.Nullable;

import javax.sound.midi.Sequence;
import java.time.LocalTime;

@RequiredArgsConstructor
public class SequenceGenerator {

    private final MidiConfig config;

    /**
     * Generates a playable MIDI {@link Sequence} for a single {@link Pitch}.
     * @param pitch
     * @return
     */
    public Sequence getSequence(Pitch pitch) {
        return buildSequence(Note.builder(Beat.QUARTER, pitch).build());
    }

    /**
     * Generates a playable MIDI {@link Sequence} for a {@link Playable} object.
     * @param playable
     * @return
     */
    public Sequence getSequence(Playable playable) {
        return buildSequence(playable);
    }

    @Nullable
    private Sequence buildSequence(Playable playable) {
        Sequence sequence;
        try {
            sequence = new Sequence(config.getFrames(), config.getTickResolution());

            MidiEventGenerator generator = new MidiEventGenerator(sequence, config);

            /*
             * TODO: add a method Playable.hasMidiDataFor(MidiDataType:: enum):: boolean
             *  that can be used here to determine whether to add the default "setup" events below.
             *  Doing so will eliminate superfluous MIDI messages that could potentially confuse or break MIDI playback / interpretation.
             */

            // Always add these to the beginning of every MIDI sequence
            generator.addSequenceNumberEvent(config.getDefaultTrack(), 0);
            generator.addSetTempoEvent(0, config.getDefaultTempo());
            generator.addProgramChangeEvent(0, config.getDefaultTrack(), config.getDefaultChannel(), config.getDefaultInstrument());
            generator.addCopyrightNoticeEvent(config.getDefaultTrack(), StringUtils.defaultIfEmpty(config.getCopyrightNotice(), StringUtils.EMPTY)
                    + System.lineSeparator() + "MIDI sequence generated by ChordInnate");
            generator.addTrackNameEvent(config.getDefaultTrack(), ""); // TODO: set value provided by user for the given track
            if (config.isMidiTimeCodeEnabled()) {
                generator.addSMPTEOffsetEvent(LocalTime.now(), 0); // TODO: set subframe
                // TODO: tempo map to use with MTC?
            }
            generator.addTimeSignatureEvent(0, config.getDefaultTimeSignature());
            generator.addKeySignatureEvent(0, config.getDefaultKeySignature());

            // add all custom MIDI events
            playable.accept(generator);

            generator.addEndOfTrackEvent();

        } catch (Exception ex) {
            return null;
        }
        return sequence;
    }
}
